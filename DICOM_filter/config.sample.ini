# Archivo de configuración de ejemplo
[CONFIG]
batch_size = 32
extract = yes
keep_inbound = no
debug = yes
wait_series = no
stash = yes
delete_failed_instance = no
delete_failed_series = no
series_timeout = 10
read_timer = 2
secret_path = /secret/secret.key
flask_service = yes
parse_patient_id = no
inverse_lists = no

[LOG]
debug_log_path = /log/debug.log
error_log_path = /log/error.log
info_log_path = /log/info.log

[TERMINOLOGY]
online_lookup = yes

# Para crear las tablas SQL se debe utilizar las queries que se encuentran en el archivo create_db.json (SQLite interno ya las tiene creada)
# tested sql_types: sqlite3, postgresql
# Por defecto se utiliza sqlite3 localmente (solo se lee sql_type y db_name):
#   sql_type = sqlite3
#   db_name = sqlite/tmp_id_db.db
# Ejemplo Postgresql:
#   sql_type = postgresql
#   db_name = hashdb
#   db_user = hashdbuser
#   db_password = hashdbuser
#   table_name = hashtable
[PrivateDB]
host = 128.0.8.127
port = 5432
sql_type = sqlite3
db_name = sqlite/tmp_id_db.db
db_user = 
db_password = 
table_name = lat

# Solo si store_report esta habilitado
[ReportDB]
host = 128.0.8.127
port = 5432
sql_type = sqlite3
db_name = sqlite/tmp_id_db.db
db_user = 
db_password = 
table_name_instance = reportInstance
table_name_serie = reportSerie
store_report_instance = yes
store_report_serie = yes

[FLASK]
port = 5000
host = 0.0.0.0

[FORMATS]
format_1 = .DMC
format_2 = .dcm
format_3 = .dat

[ARCHIVE]
health_curated_path = /alpacs_data/curated/
health_inbound_path = /alpacs_data/inbound/
health_processed_path = /alpacs_data/processed/
health_stashed_path = /alpacs_data/stashed/

# Url a la cual se envian los datos extraidos, solo si extract esta habilitado
[API]
post_data_url = http://0.0.0.0:8484/generate

# Nombre del archivo de mapeo que es enviado como payload al servidor de curación, solo si extract esta habilitado
[MAPPING]
mapping = mapping_DICOM_patient_imagingstudy_device_organization.json

# Tags adicionales que se quieren extraer y tags que se quieren mantener en el DICOM curado
[TAGS]
extract_list = 
    (0x0010,0x0030)
    (0x0010,0x0040)
    (0x0010,0x1040)
    (0x0008,0x0080)
    (0x0008,0x0081)
    (0x0020,0x000D)
    (0x0008,0x0061)
    (0x0008,0x0020)
    (0x0008,0x0030)
    (0x0020,0x1206)
    (0x0020,0x1208)
    (0x0008,0x1032)
    (0x0040,0x1002)
    (0x0008,0x1030)
    (0x0020,0x000E)
    (0x0020,0x0011)
    (0x0008,0x0060)
    (0x0008,0x103E)
    (0x0020,0x1209)
    (0x0018,0x0015)
    (0x0020,0x0060)
    (0x0008,0x0021)
    (0x0008,0x0031)
    (0x0008,0x0018)
    (0x0008,0x0016)
    (0x0020,0x0013)
    (0x0008,0x0008)
    (0x0008,0x0070)
    (0x0018,0x1000)
    (0x0008,0x1090)
maintain_list =
    (0x0008,0x103e)
	(0x0028,0x1010)
	(0x0028,0x1011)
	(0x0028,0x1050)
	(0x0028,0x1051)
	(0x0028,0x1052)
	(0x0028,0x1053)

# Tags que deben existir con valor no nulo, sino se elimina o se mueve al stash dependiendo del parametro 'stash' en sección [CONFIG]
[RULES]
#Listado de Tags que se deben extraer del DICOM con valor no nulo
extract_rules_list =
#Listado de Tags que se deben mantener en el DICOM curado con valor no nulo
#Accession Number
#Patient ID
#Study Instance UID
#Series Instance UID
#SOP Instance UID
#Instance Number
maintain_rules_list =
    (0x0008,0x0050)
    (0x0010,0x0020)
    (0x0020,0x000d)
    (0x0020,0x000e)
    (0x0008,0x0018)
    (0x0020,0x0013)
